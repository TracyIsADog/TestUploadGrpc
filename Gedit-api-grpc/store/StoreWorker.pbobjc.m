// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: store/store_worker.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "store/StoreWorker.pbobjc.h"
 #import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - STWRKStoreWorkerRoot

@implementation STWRKStoreWorkerRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - STWRKStoreWorkerRoot_FileDescriptor

static GPBFileDescriptor *STWRKStoreWorkerRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"store_worker"
                                                 objcPrefix:@"STWRK"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - STWRKAddRequest

@implementation STWRKAddRequest

@dynamic storeId;
@dynamic workerId;

typedef struct STWRKAddRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *storeId;
  NSString *workerId;
} STWRKAddRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKAddRequest_FieldNumber_StoreId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STWRKAddRequest__storage_, storeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workerId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKAddRequest_FieldNumber_WorkerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STWRKAddRequest__storage_, workerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STWRKAddRequest class]
                                     rootClass:[STWRKStoreWorkerRoot class]
                                          file:STWRKStoreWorkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STWRKAddRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\007\000\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STWRKListByStoreRequest

@implementation STWRKListByStoreRequest

@dynamic storeId;
@dynamic from;
@dynamic size;

typedef struct STWRKListByStoreRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *storeId;
} STWRKListByStoreRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByStoreRequest_FieldNumber_StoreId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STWRKListByStoreRequest__storage_, storeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByStoreRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STWRKListByStoreRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByStoreRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STWRKListByStoreRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STWRKListByStoreRequest class]
                                     rootClass:[STWRKStoreWorkerRoot class]
                                          file:STWRKStoreWorkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STWRKListByStoreRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STWRKListByWorkerRequest

@implementation STWRKListByWorkerRequest

@dynamic workerId;
@dynamic from;
@dynamic size;

typedef struct STWRKListByWorkerRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *workerId;
} STWRKListByWorkerRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workerId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByWorkerRequest_FieldNumber_WorkerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STWRKListByWorkerRequest__storage_, workerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByWorkerRequest_FieldNumber_From,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STWRKListByWorkerRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = STWRKListByWorkerRequest_FieldNumber_Size,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STWRKListByWorkerRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STWRKListByWorkerRequest class]
                                     rootClass:[STWRKStoreWorkerRoot class]
                                          file:STWRKStoreWorkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STWRKListByWorkerRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STWRKWorkshipResponse

@implementation STWRKWorkshipResponse

@dynamic hasStatus, status;
@dynamic workerId;
@dynamic storeId;
@dynamic active;
@dynamic created;
@dynamic lastUpdated;
@dynamic from;

typedef struct STWRKWorkshipResponse__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  NSString *workerId;
  NSString *storeId;
  COMMONStatus *status;
  int64_t created;
  int64_t lastUpdated;
} STWRKWorkshipResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workerId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_WorkerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, workerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_StoreId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, storeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_Active,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_Created,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "lastUpdated",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_LastUpdated,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, lastUpdated),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = STWRKWorkshipResponse_FieldNumber_From,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = STWRKWorkshipResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STWRKWorkshipResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STWRKWorkshipResponse class]
                                     rootClass:[STWRKStoreWorkerRoot class]
                                          file:STWRKStoreWorkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STWRKWorkshipResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\001\010\000\005\007\000\n\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - STWRKBanRequest

@implementation STWRKBanRequest

@dynamic workerId;
@dynamic storeId;
@dynamic active;

typedef struct STWRKBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *workerId;
  NSString *storeId;
} STWRKBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workerId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKBanRequest_FieldNumber_WorkerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(STWRKBanRequest__storage_, workerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "storeId",
        .dataTypeSpecific.className = NULL,
        .number = STWRKBanRequest_FieldNumber_StoreId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(STWRKBanRequest__storage_, storeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = STWRKBanRequest_FieldNumber_Active,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[STWRKBanRequest class]
                                     rootClass:[STWRKStoreWorkerRoot class]
                                          file:STWRKStoreWorkerRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(STWRKBanRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\010\000\005\007\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
