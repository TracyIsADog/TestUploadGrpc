// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: payment/payment.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "payment/Payment.pbobjc.h"
 #import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - PAYMENTPaymentRoot

@implementation PAYMENTPaymentRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PAYMENTPaymentRoot_FileDescriptor

static GPBFileDescriptor *PAYMENTPaymentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"payment"
                                                 objcPrefix:@"PAYMENT"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum PAYMENTChannel

GPBEnumDescriptor *PAYMENTChannel_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "Alipay\000Wxpay\000Yspay\000";
    static const int32_t values[] = {
        PAYMENTChannel_Alipay,
        PAYMENTChannel_Wxpay,
        PAYMENTChannel_Yspay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PAYMENTChannel)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PAYMENTChannel_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PAYMENTChannel_IsValidValue(int32_t value__) {
  switch (value__) {
    case PAYMENTChannel_Alipay:
    case PAYMENTChannel_Wxpay:
    case PAYMENTChannel_Yspay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PAYMENTCreateRequest

@implementation PAYMENTCreateRequest

@dynamic payeeId;
@dynamic payeeStoreId;
@dynamic payeeWorkerId;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;

typedef struct PAYMENTCreateRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  NSString *payeeId;
  NSString *payeeStoreId;
  NSString *payeeWorkerId;
} PAYMENTCreateRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payeeId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_PayeeId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, payeeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_PayeeStoreId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, payeeStoreId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeWorkerId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_PayeeWorkerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, payeeWorkerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_ShouldPay,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_ActualPay,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTCreateRequest_FieldNumber_PointsPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PAYMENTCreateRequest__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTCreateRequest class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTCreateRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\006\014\007\000\r\014\000\016\r\000\017\t\000\020\t\000\021\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAYMENTGetRequest

@implementation PAYMENTGetRequest

@dynamic uuid;

typedef struct PAYMENTGetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} PAYMENTGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTGetRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTGetRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTGetRequest class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTGetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAYMENTListRequest

@implementation PAYMENTListRequest

@dynamic payerId;
@dynamic payeeId;
@dynamic payeeStoreId;
@dynamic from;
@dynamic size;

typedef struct PAYMENTListRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
  NSString *payerId;
  NSString *payeeId;
  NSString *payeeStoreId;
} PAYMENTListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payerId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListRequest_FieldNumber_PayerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTListRequest__storage_, payerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListRequest_FieldNumber_PayeeId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAYMENTListRequest__storage_, payeeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListRequest_FieldNumber_PayeeStoreId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAYMENTListRequest__storage_, payeeStoreId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListRequest_FieldNumber_From,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAYMENTListRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListRequest_FieldNumber_Size,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAYMENTListRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTListRequest class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003\013\007\000\014\007\000\r\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAYMENTListMyRequest

@implementation PAYMENTListMyRequest

@dynamic includePayee;
@dynamic includePayer;
@dynamic from;
@dynamic size;

typedef struct PAYMENTListMyRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t from;
  int32_t size;
} PAYMENTListMyRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "includePayee",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListMyRequest_FieldNumber_IncludePayee,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "includePayer",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListMyRequest_FieldNumber_IncludePayer,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "from",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListMyRequest_FieldNumber_From,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAYMENTListMyRequest__storage_, from),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "size",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTListMyRequest_FieldNumber_Size,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PAYMENTListMyRequest__storage_, size),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTListMyRequest class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTListMyRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\014\000\002\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAYMENTPaymentResponse

@implementation PAYMENTPaymentResponse

@dynamic hasStatus, status;
@dynamic hasPayment, payment;

typedef struct PAYMENTPaymentResponse__storage_ {
  uint32_t _has_storage_[1];
  PAYMENTPayment *payment;
  COMMONStatus *status;
} PAYMENTPaymentResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "payment",
        .dataTypeSpecific.className = GPBStringifySymbol(PAYMENTPayment),
        .number = PAYMENTPaymentResponse_FieldNumber_Payment,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAYMENTPaymentResponse__storage_, payment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = PAYMENTPaymentResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTPaymentResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTPaymentResponse class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTPaymentResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PAYMENTPayment

@implementation PAYMENTPayment

@dynamic uuid;
@dynamic payerId;
@dynamic payeeId;
@dynamic payeeStoreId;
@dynamic payeeWorkerId;
@dynamic shouldPay;
@dynamic actualPay;
@dynamic pointsPay;
@dynamic points;
@dynamic status;
@dynamic channel;
@dynamic channelOrderId;
@dynamic created;

typedef struct PAYMENTPayment__storage_ {
  uint32_t _has_storage_[1];
  int32_t shouldPay;
  int32_t actualPay;
  int32_t pointsPay;
  int32_t points;
  PAYMENTPayment_Status status;
  PAYMENTChannel channel;
  NSString *uuid;
  NSString *payerId;
  NSString *payeeId;
  NSString *payeeStoreId;
  NSString *payeeWorkerId;
  NSString *channelOrderId;
  int64_t created;
} PAYMENTPayment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payerId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_PayerId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, payerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_PayeeId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, payeeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeStoreId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_PayeeStoreId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, payeeStoreId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "payeeWorkerId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_PayeeWorkerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, payeeWorkerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "shouldPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_ShouldPay,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, shouldPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "actualPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_ActualPay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, actualPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pointsPay",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_PointsPay,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, pointsPay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "points",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_Points,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, points),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PAYMENTPayment_Status_EnumDescriptor,
        .number = PAYMENTPayment_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "channel",
        .dataTypeSpecific.enumDescFunc = PAYMENTChannel_EnumDescriptor,
        .number = PAYMENTPayment_FieldNumber_Channel,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "channelOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_ChannelOrderId,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, channelOrderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "created",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTPayment_FieldNumber_Created,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(PAYMENTPayment__storage_, created),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTPayment class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTPayment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\010\013\007\000\014\007\000\r\014\000\016\r\000\017\t\000\020\t\000\021\t\000\033\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PAYMENTPayment_Status_RawValue(PAYMENTPayment *message) {
  GPBDescriptor *descriptor = [PAYMENTPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PAYMENTPayment_FieldNumber_Status];
  return GPBGetMessageInt32Field(message, field);
}

void SetPAYMENTPayment_Status_RawValue(PAYMENTPayment *message, int32_t value) {
  GPBDescriptor *descriptor = [PAYMENTPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PAYMENTPayment_FieldNumber_Status];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

int32_t PAYMENTPayment_Channel_RawValue(PAYMENTPayment *message) {
  GPBDescriptor *descriptor = [PAYMENTPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PAYMENTPayment_FieldNumber_Channel];
  return GPBGetMessageInt32Field(message, field);
}

void SetPAYMENTPayment_Channel_RawValue(PAYMENTPayment *message, int32_t value) {
  GPBDescriptor *descriptor = [PAYMENTPayment descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PAYMENTPayment_FieldNumber_Channel];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum PAYMENTPayment_Status

GPBEnumDescriptor *PAYMENTPayment_Status_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static const char *valueNames =
        "New\000Inprogress\000Failed\000Ok\000";
    static const int32_t values[] = {
        PAYMENTPayment_Status_New,
        PAYMENTPayment_Status_Inprogress,
        PAYMENTPayment_Status_Failed,
        PAYMENTPayment_Status_Ok,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PAYMENTPayment_Status)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PAYMENTPayment_Status_IsValidValue];
    if (!OSAtomicCompareAndSwapPtrBarrier(nil, worker, (void * volatile *)&descriptor)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PAYMENTPayment_Status_IsValidValue(int32_t value__) {
  switch (value__) {
    case PAYMENTPayment_Status_New:
    case PAYMENTPayment_Status_Inprogress:
    case PAYMENTPayment_Status_Failed:
    case PAYMENTPayment_Status_Ok:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PAYMENTUpdateWithAlipayBackRequest

@implementation PAYMENTUpdateWithAlipayBackRequest

@dynamic channelOrderId;

typedef struct PAYMENTUpdateWithAlipayBackRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *channelOrderId;
} PAYMENTUpdateWithAlipayBackRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelOrderId",
        .dataTypeSpecific.className = NULL,
        .number = PAYMENTUpdateWithAlipayBackRequest_FieldNumber_ChannelOrderId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PAYMENTUpdateWithAlipayBackRequest__storage_, channelOrderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PAYMENTUpdateWithAlipayBackRequest class]
                                     rootClass:[PAYMENTPaymentRoot class]
                                          file:PAYMENTPaymentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PAYMENTUpdateWithAlipayBackRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\033\016\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
