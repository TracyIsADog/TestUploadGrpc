// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user/user_profile.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "user/UserProfile.pbobjc.h"
 #import "Common.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - USRPROFUserProfileRoot

@implementation USRPROFUserProfileRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - USRPROFUserProfileRoot_FileDescriptor

static GPBFileDescriptor *USRPROFUserProfileRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"user_profile"
                                                 objcPrefix:@"USRPROF"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - USRPROFAddRequest

@implementation USRPROFAddRequest

@dynamic mobile;

typedef struct USRPROFAddRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *mobile;
} USRPROFAddRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFAddRequest_FieldNumber_Mobile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFAddRequest__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFAddRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFAddRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFAddResponse

@implementation USRPROFAddResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct USRPROFAddResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  COMMONStatus *status;
} USRPROFAddResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFAddResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFAddResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = USRPROFAddResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFAddResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFAddResponse class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFAddResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFListRequest

@implementation USRPROFListRequest

@dynamic page;

typedef struct USRPROFListRequest__storage_ {
  uint32_t _has_storage_[1];
  int32_t page;
} USRPROFListRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "page",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFListRequest_FieldNumber_Page,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFListRequest__storage_, page),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFListRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFListRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFGetRequest

@implementation USRPROFGetRequest

@dynamic uuid;

typedef struct USRPROFGetRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} USRPROFGetRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFGetRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFGetRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFGetRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFGetRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFBanRequest

@implementation USRPROFBanRequest

@dynamic uuid;
@dynamic active;

typedef struct USRPROFBanRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
} USRPROFBanRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFBanRequest_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFBanRequest__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFBanRequest_FieldNumber_Active,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFBanRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFBanRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFBanResponse

@implementation USRPROFBanResponse

@dynamic hasStatus, status;
@dynamic uuid;
@dynamic active;

typedef struct USRPROFBanResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  COMMONStatus *status;
} USRPROFBanResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFBanResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFBanResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFBanResponse_FieldNumber_Active,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = USRPROFBanResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFBanResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFBanResponse class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFBanResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFFindRequest

@implementation USRPROFFindRequest

@dynamic mobile;

typedef struct USRPROFFindRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *mobile;
} USRPROFFindRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFFindRequest_FieldNumber_Mobile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFFindRequest__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFFindRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFFindRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFUserProfileResponse

@implementation USRPROFUserProfileResponse

@dynamic hasStatus, status;
@dynamic hasUserProfile, userProfile;

typedef struct USRPROFUserProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  USRPROFUserProfile *userProfile;
  COMMONStatus *status;
} USRPROFUserProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userProfile",
        .dataTypeSpecific.className = GPBStringifySymbol(USRPROFUserProfile),
        .number = USRPROFUserProfileResponse_FieldNumber_UserProfile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFUserProfileResponse__storage_, userProfile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = USRPROFUserProfileResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFUserProfileResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFUserProfileResponse class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFUserProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\013\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFUserProfile

@implementation USRPROFUserProfile

@dynamic uuid;
@dynamic mobile;
@dynamic name;
@dynamic desc;
@dynamic active;

typedef struct USRPROFUserProfile__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  NSString *mobile;
  NSString *name;
  NSString *desc;
} USRPROFUserProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUserProfile_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFUserProfile__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "mobile",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUserProfile_FieldNumber_Mobile,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFUserProfile__storage_, mobile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUserProfile_FieldNumber_Name,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(USRPROFUserProfile__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUserProfile_FieldNumber_Desc,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(USRPROFUserProfile__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "active",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUserProfile_FieldNumber_Active,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFUserProfile class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFUserProfile__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFUpdateMyProfileRequest

@implementation USRPROFUpdateMyProfileRequest

@dynamic name;
@dynamic logo;
@dynamic desc;
@dynamic isNameUpdate;
@dynamic isLogoUpdate;
@dynamic isDescUpdate;

typedef struct USRPROFUpdateMyProfileRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *logo;
  NSString *desc;
} USRPROFUpdateMyProfileRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFUpdateMyProfileRequest__storage_, name),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "logo",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_Logo,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFUpdateMyProfileRequest__storage_, logo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "desc",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_Desc,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(USRPROFUpdateMyProfileRequest__storage_, desc),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "isNameUpdate",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_IsNameUpdate,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isLogoUpdate",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_IsLogoUpdate,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "isDescUpdate",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileRequest_FieldNumber_IsDescUpdate,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFUpdateMyProfileRequest class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFUpdateMyProfileRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\003f\014\000g\014\000k\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - USRPROFUpdateMyProfileResponse

@implementation USRPROFUpdateMyProfileResponse

@dynamic hasStatus, status;
@dynamic uuid;

typedef struct USRPROFUpdateMyProfileResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  COMMONStatus *status;
} USRPROFUpdateMyProfileResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.className = NULL,
        .number = USRPROFUpdateMyProfileResponse_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(USRPROFUpdateMyProfileResponse__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.className = GPBStringifySymbol(COMMONStatus),
        .number = USRPROFUpdateMyProfileResponse_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(USRPROFUpdateMyProfileResponse__storage_, status),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[USRPROFUpdateMyProfileResponse class]
                                     rootClass:[USRPROFUserProfileRoot class]
                                          file:USRPROFUserProfileRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(USRPROFUpdateMyProfileResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
